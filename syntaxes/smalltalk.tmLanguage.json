{
	"information_for_contributors": [
		"This file has been converted from https://github.com/textmate/smalltalk.tmbundle/blob/master/Syntaxes/SmallTalk.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
    "name": "Smalltalk",
    "foldingStartMarker": "\\[",
    "foldingStopMarker": "^\\s*\\]|^\\s\\]",
    "keyEquivalent": "^~S",
    "fileTypes": [
        "st"
    ],
    "patterns": [
        {
            "match": "\\^",
            "name": "keyword.control.flow.return.smalltalk"
        },
        {
            "name": "meta.method.definition.header.smalltalk",
            "match": "^(!)\\s*([A-Za-z_][A-Za-z0-9_]*)\\s+(methodsFor:)\\s*('([^']*)')(?:\\s+(stamp:)\\s*('([^']*)'))?\\s*(!?)$",
            "captures": {
                "1": { "name": "punctuation.definition.method.begin.smalltalk" },
                "2": { "name": "entity.name.type.class.smalltalk" },
                "3": { "name": "keyword.declaration.method.smalltalk" },
                "4": { "name": "string.quoted.single.protocol.smalltalk" },
                "5": { "name": "string.quoted.single.protocol.smalltalk" },
                "6": { "name": "keyword.declaration.method.stamp.smalltalk" },
                "7": { "name": "string.quoted.single.stamp.smalltalk" },
                "8": { "name": "string.quoted.single.stamp.smalltalk" },
                "9": { "name": "punctuation.definition.method.end.smalltalk" }
            }
        },
        {
             "match": "^! !$",
             "name": "punctuation.definition.method.end.smalltalk"
        },        
        {
            "match": "\\$.",
            "name": "constant.character.smalltalk"
        },
        {
            "match": "\\b(class)\\b",
            "name": "storage.type.$1.smalltalk"
        },
        {
            "match": "\\b(extend|super|self)\\b",
            "name": "storage.modifier.$1.smalltalk"
        },
        {
            "match": "\\b(yourself|new|Smalltalk)\\b",
            "name": "keyword.control.$1.smalltalk"
        },
        {
            "comment": "Parse the variable declaration like: |a b c|",
            "match": "\/^:\\w*\\s*\\|\/",
            "name": "constant.other.block.smalltalk"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.begin.smalltalk"
                },
                "2": {
                    "patterns": [
                        {
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                            "name": "variable.other.local.smalltalk"
                        }
                    ]
                },
                "3": {
                    "name": "punctuation.definition.variable.end.smalltalk"
                }
            },
            "match": "(\\|)(\\s*[a-zA-Z_][a-zA-Z0-9_]*(?:\\s+[a-zA-Z_][a-zA-Z0-9_]*)*\\s*)(\\|)"
        },
        {
            "name": "meta.block.smalltalk",
            "begin": "\\[",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.block.begin.smalltalk" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "punctuation.definition.block.end.smalltalk" }
            },
            "patterns": [
                {
                    "name": "meta.block.arguments.smalltalk",
                    "match": "((?:\\s*:[a-zA-Z_][a-zA-Z0-9_]*)+)\\s*(\\|)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": ":[a-zA-Z_][a-zA-Z0-9_]*",
                                    "name": "variable.parameter.block.smalltalk"
                                }
                            ]
                        },
                        "2": {
                            "name": "punctuation.separator.arguments.block.smalltalk"
                        }
                    }
                },
                {
                    "include": "$self"
                }
            ]
        },
        {
            "include": "#numeric"
        },
        {
            "match": ";",
            "name": "punctuation.separator.cascade.smalltalk"
        },
        {
            "match": "\\.", 
            "name": "punctuation.terminator.statement.smalltalk"
        },
        {
            "match": ":=",
            "name": "keyword.operator.assignment.smalltalk"
        },
        {
            "match": "<(?!<|=)|>(?!<|=|>)|<=|>=|=|==|~=|~~|>>",
            "name": "keyword.operator.comparison.smalltalk"
        },
        {
            "match": "(\\*|\\+|\\-|\/|\\\\)",
            "name": "keyword.operator.arithmetic.smalltalk"
        },
        {
            "match": "(?<=[ \\t])!+|\\bnot\\b|&|\\band\\b|\\||\\bor\\b",
            "name": "keyword.operator.logical.smalltalk"
        },
        {
            "match": "->|,|@",
            "name": "keyword.operator.misc.smalltalk"
        },
        {
            "comment": "Fake reserved word -> main Smalltalk messages",
            "match": "(?<!\\.)\\b(ensure|resume|retry|signal)\\b(?![?!])",
            "name": "keyword.control.smalltalk"
        },
        {
            "comment": "Fake conditionals. Smalltalk Methods.",
            "match": "\\b(ifCurtailed:|ifTrue:|ifFalse:|whileFalse:|whileTrue:)\\b",
            "name": "keyword.control.conditionals.smalltalk"
        },
        {
            "match": "\\b(to:do:|do:|timesRepeat:|even|collect:|select:|reject:)\\b",
            "name": "keyword.control.loop.smalltalk"
        },
        {
            "match": "\\b(initialize|show:|cr|printString|space|new:|at:|at:put:|size|value|value:|nextPut:)\\b",
            "name": "support.function.smalltalk"
        },
        {
            "begin": "^\\s*([A-Za-z_][A-Za-z0-9_]*)\\s+(subclass:)\\s*('#?([A-Za-z_][A-Za-z0-9_]*)')", 
            "beginCaptures": {
                "1": { "name": "entity.other.inherited-class.smalltalk" },
                "2": { "name": "keyword.declaration.class.smalltalk" },
                "3": { "name": "entity.name.type.class.smalltalk" },
                "4": { "name": "entity.name.type.class.smalltalk" }
            },
            "end": "(?=^\\s*!)",
            "patterns": [
                {
                    "match": "\\b(instanceVariableNames:|classVariableNames:|poolDictionaries:|category:)\\b",
                    "name": "keyword.declaration.class.variables.smalltalk"
                },
                {
                    "include": "#string_single_quoted"
                },
                {
                    "include": "#comment_block"
                }
            ],
            "name": "meta.class.definition.smalltalk"
        },
        {
            "begin": "\"",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.comment.begin.smalltalk"
                }
            ],
            "end": "\"",
            "endCaptures": [
                {
                    "name": "punctuation.definition.comment.end.smalltalk"
                }
            ],
            "name": "comment.block.smalltalk"
        },
        {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.smalltalk"
        },
        {
            "match": "\\b(nil)\\b",
            "name": "constant.language.nil.smalltalk"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.constant.smalltalk"
                }
            },
            "comment": "symbols",
            "match": "(#)[a-zA-Z_][a-zA-Z0-9_:]*",
            "name": "constant.other.symbol.smalltalk"
        },
        {
            "begin": "#\\[",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.constant.begin.smalltalk"
                }
            ],
            "end": "\\]",
            "endCaptures": [
                {
                    "name": "punctuation.definition.constant.end.smalltalk"
                }
            ],
            "name": "meta.array.byte.smalltalk",
            "patterns": [
                {
                    "match": "[0-9]+(r[a-zA-Z0-9]+)?",
                    "name": "constant.numeric.integer.smalltalk"
                },
                {
                    "match": "[^\\s\\]]+",
                    "name": "invalid.illegal.character-not-allowed-here.smalltalk"
                }
            ]
        },
        {
            "begin": "#\\(",
            "beginCaptures": { 
                "0": { "name": "punctuation.definition.constant.array.begin.smalltalk" }
            },
            "comment": "Array Constructor",
            "end": "\\)",
            "endCaptures": {
                "0": { "name": "punctuation.definition.constant.array.end.smalltalk" }
            },
            "name": "constant.other.array.literal.smalltalk",
            "patterns": [
                { "include": "#numeric" },
                { "include": "#string_single_quoted" },
                { "include": "#symbol" },
                { "include": "#comment_block" },
                { "include": "$self" }
            ]
        },
        {
            "begin": "'",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.string.begin.smalltalk"
                }
            ],
            "end": "'",
            "endCaptures": [
                {
                    "name": "punctuation.definition.string.end.smalltalk"
                }
            ],
            "name": "string.quoted.single.smalltalk"
        },
        {
            "match": "\\b[A-Z]\\w*\\b",
            "name": "entity.name.type.class.smalltalk"
        }
    ],
    "repository": {
        "numeric": {
            "patterns": [
                {
                    "match": "(?<!\\w)[0-9]+\\.[0-9]+s[0-9]*",
                    "name": "constant.numeric.float.scaled.smalltalk"
                },
                {
                    "match": "(?<!\\w)[0-9]+\\.[0-9]+([edq]-?[0-9]+)?",
                    "name": "constant.numeric.float.smalltalk"
                },
                {
                    "match": "(?<!\\w)-?[0-9]+r[a-zA-Z0-9]+",
                    "name": "constant.numeric.integer.radix.smalltalk"
                },
                {
                    "match": "(?<!\\w)-?[0-9]+([edq]-?[0-9]+)?",
                    "name": "constant.numeric.integer.smalltalk"
                }
            ]
        },
        "string_single_quoted": {
             "begin": "'",
             "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.smalltalk" } },
             "end": "'",
             "endCaptures": { "0": { "name": "punctuation.definition.string.end.smalltalk" } },
             "name": "string.quoted.single.smalltalk"
        },
        "comment_block": {
            "begin": "\"",
            "beginCaptures": { "0": { "name": "punctuation.definition.comment.begin.smalltalk" } },
            "end": "\"",
            "endCaptures": { "0": { "name": "punctuation.definition.comment.end.smalltalk" } },
            "name": "comment.block.smalltalk"
        },
        "symbol": {
            "match": "(#)[a-zA-Z_][a-zA-Z0-9_:]*",
             "captures": {
                 "1": { "name": "punctuation.definition.constant.symbol.smalltalk" }
             },
            "name": "constant.other.symbol.smalltalk"
        }
    },
    "scopeName": "source.smalltalk",
    "uuid": "1ED64A34-BCB1-44E1-A0FE-84053003E232"
}